#!/usr/bin/perl -w

use strict;
use POSIX 'strftime';
use FindBin '$Bin';

@ARGV == 2 || @ARGV == 3 or die "Usage: $0 SIZES EXP_NAME [BASE_DIR]\n";
my ($SIZES, $EXP, $DIR) = (@ARGV, '/var/tmp');

my %ansible_nodes;
my $hf = "$DIR/$EXP/ansible/ansible-hosts";
open (HF, '<', $hf) or die "$hf: $!\n";
my $hslen = 0;
while (<HF>) {
    /^(\w*[^\W\d])(\d+)\s/ or next;
    my ($type, $number) = ($1, $2);
    chomp;
    /\bansible_ssh_host=(\S+)\b/ or die "No host in $_\n";
    my $h = $1;
    /\bansible_ssh_port=(\d+)\b/ or die "No port in $_\n";
    my $p = $1;
    /\bansible_ssh_user=(\S+)\b/ or die "No user in $_\n";
    my $u = $1;
    my $hs = join('.', (split(/\./, $h))[0, 1]);
    $ansible_nodes{"$type$number"} = [$type, $number, $h, $p, $u, $hs];
    $hslen < length $hs and $hslen = length $hs;
}
close HF;

my $copy_keys;
for my $path ($Bin, split(/:/, $ENV{PATH})) {
    -f "$path/copy-keys-to-experiment" or next;
    -x _ or next;
    $copy_keys = "$path/copy-keys-to-experiment";
    last;
}
defined $copy_keys and run('copy-keys-to-experiment', $copy_keys, $EXP, $DIR);

my $rsync;
for my $path ($Bin, split(/:/, $ENV{PATH})) {
    -f "$path/rsync-to-experiment" or next;
    -x _ or next;
    $rsync = "$path/rsync-to-experiment";
    last;
}
defined $rsync or die "Cannot find rsync-to-experiment in $Bin or PATH\n";

my %hwaddr;
my $mo = "$DIR/$EXP/output.rspec";
open(MO, '<', $mo) or die "$mo: $!\n";
while (<MO>) {
    /^\s+<interface(?:_ref)?\s/i or next;
    /\bclient_id="(\w+):(\w+)"/i or next;
    my ($node, $ifno) = ($1, $2);
    /\bmac_address="([[:xdigit:]]{2}):?
		    ([[:xdigit:]]{2}):?
		    ([[:xdigit:]]{2}):?
		    ([[:xdigit:]]{2}):?
		    ([[:xdigit:]]{2}):?
		    ([[:xdigit:]]{2})"/ix or next;
    my $hwaddr = join(':', $1, $2, $3, $4, $5, $6);
    $hwaddr{$node}{$ifno} = $hwaddr;
}
# record the mtime of the output rspec: we consider this as an approximation
# of the experiment boot time (it does not have to be precise, just to be
# able to distinguish between separate boots of the same experiment)
my $boot = strftime('%Y%m%d%H%M%S', gmtime((stat MO)[9]));
close MO;

my ($authname, %our_nodes, %our_routes);
my $es = "$DIR/$EXP/action.script";
open (ES, '<', $es) or die "$es: $!\n";
while (<ES>) {
    if (/^node\s+(\w+)\s+(\d+)\s+(\S+)\s+(\S+)\s+(\S+)\b/) {
	my ($type, $number, $ifno, $ipv4, $ipv6) = ($1, $2, $3, $4, $5);
	my $node = $type . $number;
	exists $ansible_nodes{$node}
	    or die "Invalid data: $type $number not known\n";
	exists $hwaddr{$node}{$ifno}
	    or die "Invalid data: $type $number does not have $ifno\n";
	my $hwaddr = $hwaddr{$node}{$ifno};
	push @{$our_nodes{$node}}, [ $hwaddr, $ipv4, $ipv6 ];
    } elsif (/^rte([46])\s+(\w+)\s+(\d+)\s+(\S+)\s+(\S+)\b/) {
	my ($af, $type, $number, $to, $via) = ($1, $2, $3, $4, $5);
	my $node = $type . $number;
	push @{$our_routes{$node}}, [ $af, $to, $via ];
    } elsif (/^name\s+(\S+)\b/) {
	$1 eq $EXP or die "Inconsistent experiment name in $es: $1\n";
    } elsif (/^auth\s+(\S+)\b/) {
	$authname = $1;
    } elsif (/^keys\s/) {
	# ignore it
    } else {
	die "$es.$.: Invalid line $_";
    }
}
close ES;
defined $authname or die "$es: No testbed name\n";
exists $our_nodes{director0} or die "$es: No director defined\n";
exists $our_nodes{client0} or die "$es: No clients defined\n";
exists $our_nodes{server0} or die "$es: No servers defined\n";

my $bin = "$Bin/../objects";
chdir $bin or die "$bin: $!\n";

# create setup data
open(SD, '>', "$DIR/$EXP/setup-data.tmp") or die "$DIR/$EXP/setup-data.tmp: $!\n";
open(HD, '>', "$DIR/$EXP/hosts.tmp") or die "$DIR/$EXP/hosts.tmp: $!\n";
print SD "NAME $EXP-$authname-$boot\n" or die "$DIR/$EXP/setup-data.tmp: $!\n";
$hslen += 4;
# The setup-data file determines the order the director does things,
# in particular setting up we want them in the order: director,
# server#, router# and client#; moreover, routers need to be set
# up in reverse order so that the first router set up is the one
# talking to servers and director directly
my @our_nodes;
push @our_nodes, nodesort(grep { /^director/ } keys %our_nodes);
push @our_nodes, nodesort(grep { /^server/ } keys %our_nodes);
push @our_nodes, nodesort_r(grep { /^router/ } keys %our_nodes);
push @our_nodes, nodesort(grep { /^client/ } keys %our_nodes);
for my $node (@our_nodes) {
    my ($type, $number, $h, $p, $u, $hs) = @{$ansible_nodes{$node}};
    print SD "NODE $type $number $h $p $u\n"
	or die "$DIR/$EXP/setup-data.tmp: $!\n";
    my $name = sprintf "%-10s %s@%-${hslen}s", $node, $u, "$hs:$p";
    my $intno = 0;
    for my $item (@{$our_nodes{$node}}) {
	my ($hwaddr, $ipv4, $ipv6) = @$item;
	print SD "ADDR $type $number $hwaddr $ipv4 $ipv6\n"
	    or die "$DIR/$EXP/setup-data.tmp: $!\n";
	if ($type eq 'router') {
	    printf HD "%-30s %s%d%s %s%d\n%-30s %s%d%s %s%d\n",
		    $ipv4, $type, $number, $intno ? 's' : 'c', $type, $number,
		    $ipv6, $type, $number, $intno ? 's' : 'c', $type, $number
		or die "$DIR/$EXP/hosts.tmp: $!\n";
	    $intno++;
	} else {
	    printf HD "%-30s %s%d\n%-30s %s%d\n",
		    $ipv4, $type, $number, $ipv6, $type, $number
		or die "$DIR/$EXP/hosts.tmp: $!\n";
	}
	printf "%s  %-17s %-16s %s\n", $name, $hwaddr, $ipv4, $ipv6;
	$name = ' ' x length($name);
    }
    for my $item (@{$our_routes{$node}}) {
	my ($af, $to, $via) = @$item;
	print SD "RTE$af $type $number $to $via\n";
    }
}
close SD or die "$DIR/$EXP/setup-data.tmp: $!\n";
update_file('setup-data');
close HD or die "$DIR/$EXP/hosts.tmp: $!\n";
update_file('hosts');

# create "sizes" list
open(SD, '>', "$DIR/$EXP/sizes.tmp") or die "$DIR/$EXP/sizes.tmp: $!\n";
for my $sz (split(/,/, $SIZES)) {
    print SD "$sz\n" or die "$DIR/$EXP/sizes.tmp: $!\n";
}
close SD or die "$DIR/$EXP/sizes.tmp: $!\n";
update_file('sizes');

my @ssh = qw(ssh -oCheckHostIP=no -oStrictHostKeyChecking=no);

for my $try_key ('id_rsa', "$Bin/../objects/id_rsa") {
    -f $try_key or next;
    # need to silence ssh as git will create the file with mode 644
    chmod 0600, $try_key;
    push @ssh, ('-i', $try_key);
}

# copy binaries and experiment data to director
rsync('director0', '/tmp/experiment',
      './', "$DIR/$EXP/setup-data", "$DIR/$EXP/sizes", "$DIR/$EXP/hosts");

# run setup script on director
#XXX ssh($d_host, $d_port, $d_user, '/tmp/experiment/setup-all');

# run experiment script on director
#XXX ssh($d_host, $d_port, $d_user, '/tmp/experiment/run-experiment');

sub rsync {
    my ($node, $remdir, @locfiles) = @_;
    run("rsync @locfiles", $rsync, $EXP, $DIR, $node, '-avHP', @locfiles, $remdir);
}

sub run {
    my ($name, @prog) = @_;
    system(@prog) == 0 and return;
    $? == -1 and die "$prog[0]: $!\n";
    $? & 0x7f and die "$name: killed by signal " . ($? & 0x7f) . "\n";
    die "$name: exited with status " . ($? >> 8) . "\n";
}

sub update_file {
    my ($name) = @_;
    if (open(OLD, '<', "$DIR/$EXP/$name")) {
	open(NEW, '<', "$DIR/$EXP/$name.tmp") or die "$DIR/$EXP/$name.tmp: $!\n";
	local $/ = undef;
	my $old = <OLD>;
	my $new = <NEW>;
	close NEW;
	close OLD;
	defined $old or die "$DIR/$EXP/$name.tmp: empty file?\n";
	if (defined $new && $new eq $old) {
	    unlink "$DIR/$EXP/$name.tmp";
	    return;
	}
    }
    rename("$DIR/$EXP/$name.tmp", "$DIR/$EXP/$name")
	or die "rename($DIR/$EXP/$name.tmp, $DIR/$EXP/$name): $!\n";
}

sub nodesort {
    my @items = @_;
    my %items = map { ($_, /\D(\d+)$/ ? $1 : 0) } @items;
    sort { $items{$a} <=> $items{$b} } @items;
}

sub nodesort_r {
    my @items = @_;
    my %items = map { ($_, /\D(\d+)$/ ? $1 : 0) } @items;
    sort { $items{$b} <=> $items{$a} } @items;
}


#!/bin/sh

load_sleep=60
copy_results=true
copy_logs=false
sizes=''
schedules=''
experiments=''
really=true
while [ $# -gt 0 ]
do
    opt="$1"; shift
    case "$opt" in
	-n|--no|--no-copy) copy_results=false ;;
	-l|--logs) copy_logs=true ;;
	-s|--sleep) load_sleep="$1"; shift ;;
	-z|--size) sizes="$sizes $1"; shift ;;
	-e|--experiment) experiments="$experiments $1"; shift ;;
	-p|--pretend) really=false ;;
	*) echo "Usage: $0 [options]" >&2
	   echo "    --no-copy" >&2
	   echo "    --copy-logs" >&2
	   echo "    --sleep load_sleep" >&2
	   echo "    --size S [--size S]..." >&2
	   echo "    --schedule S [--schedule S]..." >&2
	   echo "    --experiment E [--experiment E]..." >&2
	   exit 1
	   ;;
    esac
done

[ ".$sizes" = . ] && \
    sizes="`cat /tmp/experiment/sizes`"
[ ".$schedules" = . ] && \
    schedules="`cd /tmp/experiment; for x in schedule-*; do echo "${x##*schedule-}"; done`"
[ ".$experiments" = . ] && \
    experiments="`ls /tmp/experiment | \
	awk -F- '$1 == "start" && NF > 2 {print $2}' | \
	sort -u`"

ssh='ssh -oCheckHostIP=no -oStrictHostKeyChecking=no -i/tmp/experiment/id_rsa'

# figure out testbed name
exp="`awk '/^NAME/ { print $2}' /tmp/experiment/setup-data`"

# like echo, but with timestamps
msg() {
    echo "`TZ=GMT date +%H:%M:%S`  $*"
}

interface=`head -1 /tmp/interface`

wait_path=/tmp/.experiment.wait

# auxiliary functions to wait for other nodes
prepare_wait() {
    rm -r "$wait_path" >/dev/null 2>&1
    mkdir "$wait_path" "$wait_path/wait" "$wait_path/ok"
}

wait_for() {
    touch "$wait_path/wait/$1"
}

finish_wait() {
    local type="$1"
    local what="$2"
    local dir="$3"
    local wa="`cd "$wait_path/wait" && echo *`"
    [ ".$wa" = '.*' ] && wa=''
    if [ ".$wa" != . ]
    then
	local ok=''
	msg "Waiting for ${type}s ($wa) to be $what"
	while [ ".$wa" != . ]
	do
	    change=false
	    for rn in $wa
	    do
		$really && { [ -f "$dir/$type$rn."* ] || continue; }
		mv "$wait_path/wait/$rn" "$wait_path/ok/$rn"
		change=true
	    done
	    if $change
	    then
		ok="`cd "$wait_path/ok" && echo *`"
		[ ".$ok" = '.*' ] && ok=''
		wa="`cd "$wait_path/wait" && echo *`"
		[ ".$wa" = '.*' ] && wa=''
		[ ".$wa" = . ] && break
		msg "OK $ok -- WAIT $wa"
	    fi
	    sleep 1
	done
	msg "All ${type}s ($ok) $what"
    fi
    rm -r "$wait_path" >/dev/null 2>&1
}

# run an experiment for each requested size
for size in $sizes
do
    msg "Running experiments, size=$size"
    # we need the file to be identical on all servers,
    # so we make one up here and copy to all servers
    $really && \
	{ dd if=/dev/urandom bs=1048576 count=$size of=/tmp/datafile || continue; }
    while read what type number host port user
    do
	[ "$what" = NODE ] || continue
	[ "$type" = server ] || continue
	$really && \
	    rsync -avHPe "$ssh -p$port" --whole-file --inplace \
		  /tmp/datafile $user@$host:/tmp/datafile < /dev/null
    done < /tmp/experiment/setup-data
    echo
    for experiment in $experiments
    do
	for schedule in $schedules
	do
	    if [ -f /tmp/only-run ]
	    then
		grep -q "^$experiment\\.$schedule\$" /tmp/only-run || continue;
	    fi
	    # make sure the 1-minute load average on all nodes is back to its
	    # baseline value (probably 0) before we start this experiment
	    msg "Sleeping $load_sleep seconds to let load average return to baseline level"
	    $really && sleep $load_sleep
	    rm -r /tmp/results /tmp/logs /tmp/ready >/dev/null 2>&1
	    mkdir /tmp/results /tmp/logs /tmp/ready
	    echo
	    msg "Running experiment=$experiment schedule=$schedule size=$size"
	    # start all routers and servers
	    for ntype in router server
	    do
		prepare_wait
		any_nodes=false
		while read what type number host port user
		do
		    [ "$what" = NODE ] || continue
		    [ "$type" = "$ntype" ] || continue
		    $any_nodes || msg "Starting ${ntype}s"
		    any_nodes=true
		    wait_for "$number"
		    $really || continue
		    sshrun="$ssh -p$port $user@$host -n"
		    $sshrun /tmp/experiment/start "$schedule" "$experiment" \
			"$type" "$number" "$size" &
		done < /tmp/experiment/setup-data
		finish_wait "$ntype" ready /tmp/ready
	    done
	    # start all clients and run the experiment
	    msg "Starting clients"
	    prepare_wait
	    while read what type number host port user
	    do
		[ "$what" = NODE ] || continue
		[ "$type" = client ] || continue
		wait_for "$number"
		$really || continue
		sshrun="$ssh -p$port $user@$host -n"
		$sshrun /tmp/experiment/start "$schedule" "$experiment" \
		    "$type" "$number" "$size" &
	    done < /tmp/experiment/setup-data
	    # wait for all clients to report completion
	    echo "$experiment $schedule $size" > /tmp/current-experiment
	    finish_wait client done /tmp/results
	    for ntype in server router
	    do
		any_nodes=false
		prepare_wait
		while read what type number host port user
		do
		    [ "$what" = NODE ] || continue
		    [ "$type" = "$ntype" ] || continue
		    $any_nodes || msg "Stopping ${ntype}s"
		    any_nodes=true
		    wait_for "$number"
		    $really || continue
		    sshrun="$ssh -p$port $user@$host -n"
		    $sshrun /tmp/experiment/stop
		done < /tmp/experiment/setup-data
		finish_wait "$ntype" done /tmp/results
	    done
	    if $copy_results && $really
	    then
		# create result tarballs and copy them to server
		msg "Copying results to server"
		tarball="/tmp/$exp-$experiment-$schedule-$size-`date +%Y%m%d%H%M%S`.tar.gz"
		tar czf "$tarball" -C /tmp/results .
		scp -oCheckHostIP=no -oStrictHostKeyChecking=no -i/tmp/experiment/id_rsa \
		    -P722 "$tarball" jfed@f4fresults.w42.org:results/
		rm "$tarball"
		if $copy_logs
		then
		    tar czf "$tarball" -C /tmp/logs .
		    scp -oCheckHostIP=no -oStrictHostKeyChecking=no -i/tmp/experiment/id_rsa \
			-P722 "$tarball" jfed@f4fresults.w42.org:logs/
		    rm "$tarball"
		fi
	    fi
	    # clean up
	    rm -r /tmp/results /tmp/logs /tmp/ready
	    echo
	done
    done
done

